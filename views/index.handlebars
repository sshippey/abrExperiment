<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Configuration of ABR Rules</title>

    <script src="http://cdn.dashjs.org/latest/dash.all.debug.js"></script>

    <style>
        video {
            width: 1920px;
            height: 1080px;
        }
    </style>

    <script class="code">
        // var video_name = 'academic';
        // var video_name = 'runner';
        var video_name = {{{video}}}
        var video,
            player,
            //url = "http://localhost:8080/" + video_name +  "/h264.mpd";
            url = "http://192.168.1.119:8080/" + video_name +  "/h264.mpd";

        function setVideo() {
          url = document.getElementById("videoUrl").value
          player.initialize(video, url, true);
        }

        function setABR() {
            player.updateSettings({
                streaming: {
                    abr: {
                        useDefaultABRRules: false,
                        ABRStrategy: document.getElementById("ABRStrategy").value,
                        additionalAbrRules: {
                            insufficientBufferRule: true,
                            switchHistoryRule: false,
                            droppedFramesRule: false,
                            abandonRequestsRule: false
                        }
                    }
                }
            });
        }

        var data = {
            // bitrateHistory: [],
            durationHistory: [],
            profileHistory: [],
            bufferLevelHistory: [],
            // resolutionHistory: []
        };

        // abrBola, abrDynamic, abrL2A, abrThroughput, abrLoLP 
        function init() {
            video = document.querySelector("video");
            player = dashjs.MediaPlayer().create();

            player.updateSettings({
                streaming: {
                    abr: {
                        useDefaultABRRules: false,
                        // ABRStrategy: 'abrLoLP',
                        ABRStrategy: {{{strategy}}},
                        additionalAbrRules: {
                            insufficientBufferRule: true,
                            switchHistoryRule: false,
                            droppedFramesRule: false,
                            abandonRequestsRule: false
                        }
                    }
                }
            });

            player.setAutoPlay(false);
            player.extend("SegmentResponseModifier", function () {
            return {
                modifyResponseAsync: function (chunk) {
                    if (chunk.segmentType == 'MediaSegment') {
                      console.log(chunk)
                      console.log(chunk.duration)
                      data.durationHistory.push(chunk.duration)
                      console.log(chunk.mediaInfo.bitrateList.find((e) => e.id == chunk.representationId))
                      data.profileHistory.push(chunk.mediaInfo.bitrateList.find((e) => e.id == chunk.representationId))
                    }
                    chunk.customAttribute = 'customAttribute';
                    return Promise.resolve(chunk)
                }
            };
            });


            var sent = false;

            video.addEventListener('ended', function() {
              console.log('Video has finished playing');
              // console.log(data.bitrateHistory.length);
              var mob = document.getElementById("mobilityCheck").checked;
              var los = document.getElementById("losCheck").checked;
              console.log(mob, los)

              // Prepare data
              fetch("stats", {
                method: "POST",
                body: JSON.stringify({  "history": data, 
                                        "abr": player.getSettings().streaming.abr.ABRStrategy, 
                                        "mobility": mob, 
                                        "los": los,
                                        "video": video_name
                                        }),
                headers: {
                  "Content-type": "application/json; charset=UTF-8"
                }
              }).then((response) => console.log(response));
              console.log("Sent to /stats");
            });

            setInterval(function () {
                var dashMetrics = player.getDashMetrics();
                var dashAdapter = player.getDashAdapter();

                var streamInfo = player.getActiveStream() ? player.getActiveStream().getStreamInfo() : null;
                var repSwitch = dashMetrics.getCurrentRepresentationSwitch('video', true);

                if (streamInfo && repSwitch) {
                  const periodIdx = streamInfo.index;
                  var bitrate = repSwitch ? Math.round(dashAdapter.getBandwidthForRepresentation(repSwitch.to, periodIdx) / 1000) : NaN;
                  var bufferLevel = parseFloat(dashMetrics.getCurrentBufferLevel('video')).toFixed(2);
                  var adaptation = dashAdapter.getAdaptationForType(periodIdx, 'video', streamInfo);
                  var currentRep = adaptation.Representation_asArray.find(function (rep) {
                    return rep.id === repSwitch.to
                  })
                  var frameRate = currentRep.frameRate;
                  var resolution = currentRep.width + 'x' + currentRep.height;

                  // data.bitrateHistory.push(bitrate);
                  data.bufferLevelHistory.push(bufferLevel);
                  // data.resolutionHistory.push(resolution);

                  /*
                  if (sent == false && player.getActiveStream().getHasFinishedBuffering()) {
                    sent = true;

                    var mob = document.getElementById("mobilityCheck").checked;
                    var los = document.getElementById("losCheck").checked;
                    console.log(mob, los)

                    // Prepare data
                    fetch("stats", {
                      method: "POST",
                      body: JSON.stringify({  "history": data, 
                                              "abr": player.getSettings().streaming.abr.ABRStrategy, 
                                              "mobility": mob, 
                                              "los": los,
                                              "video": video_name
                                              }),
                      headers: {
                        "Content-type": "application/json; charset=UTF-8"
                      }
                    }).then((response) => console.log(response));
                  }
                  */
               }
            }, 100);

            player.initialize(video, url, true);
        }
    </script>
</head>

<body>

  <main>
    <div class="container py-4">
      <header class="pb-3 mb-4 border-bottom">
      </header>
      <div class="row">
        <div class="col-md-4">
        </div>
        <div> Video URL
          <input name="Video URL" type="text" maxlength="512" id="videoUrl" class="searchField"/>
          <button onclick="setVideo()">Set</button>
        </div>
        <div> ABR Strategy
          <input name="ABR Strategy" type="text" maxlength="512" id="ABRStrategy" class="searchField"/>
          <button onclick="setABR()">Set</button>
        </div>
        <div class="col-md-8">
          <video controls="true"></video>
        </div>
      </div>

      <div> Possible abr strategies: abrBola, abrDynamic, abrL2A, abrThroughput, abrLoLP </div>

      <div> Mobile?
        <input name="mobility" type="checkbox" id="mobilityCheck"/>
      </div>
      <div> Line of sight to router?
        <input name="los" type="checkbox" id="losCheck"/>
      </div>

      <div class="row">
        <div class="col-md-12">
          <div id="code-output"></div>
        </div>
      </div>

      <!-- <form action="/upload" method="POST" enctype="multipart/form-data">
        <input type="file" name="file">
        <input type="submit" value="Upload">
        </form> -->

    </div>
  </main>


  <script>
    document.addEventListener('DOMContentLoaded', function () {
      init();
    });
  </script>
</body>

</html>
